-- MySQL Script generated by MySQL Workbench
-- Mon 05 Nov 2018 04:59:52 PM MST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema Merge_Data
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Merge_Data` ;

-- -----------------------------------------------------
-- Schema Merge_Data
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Merge_Data` DEFAULT CHARACTER SET utf8 ;
USE `Merge_Data` ;

-- -----------------------------------------------------
-- Table `Merge_Data`.`Repository`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Merge_Data`.`Repository` ;

CREATE TABLE IF NOT EXISTS `Merge_Data`.`Repository` (
  `id` BIGINT NOT NULL,
  `update_date` DATETIME NULL,
  `name` VARCHAR(100) NULL,
  `description` VARCHAR(400) NULL,
  `language` VARCHAR(20) NULL,
  `watch_num` INT NULL,
  `star_num` INT NULL,
  `fork_num` INT NULL,
  `issue_num` INT NULL,
  `size` BIGINT NULL,
  `merge_scenario_num` INT NULL,
  `is_done` INT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Merge_Data`.`Merge_Scenario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Merge_Data`.`Merge_Scenario` ;

CREATE TABLE IF NOT EXISTS `Merge_Data`.`Merge_Scenario` (
  `merge_commit_hash` CHAR(40) NOT NULL,
  `ancestor_commit_hash` CHAR(40) NULL,
  `parent1_commit_hash` CHAR(40) NULL,
  `parent2_commit_hash` CHAR(40) NULL,
  `parallel_changed_file_num` INT NULL,
  `merge_commit_can_compile` INT NULL,
  `merge_commit_can_pass_test` INT NULL,
  `ancestor_can_compile` INT NULL,
  `ancestor_can_pass_test` INT NULL,
  `parent1_can_compile` INT NULL,
  `parent1_can_pass_test` INT NULL,
  `parent2_can_compile` INT NULL,
  `parent2_can_pass_test` INT NULL,
  `merge_commit_date` DATETIME NULL,
  `ancestor_date` DATETIME NULL,
  `parent1_date` DATETIME NULL,
  `parent2_date` DATETIME NULL,
  `parent1_developer_num` INT NULL,
  `parent2_developer_num` INT NULL,
  `pull_request` INT NULL,
  `Repository_id` BIGINT NOT NULL,
  PRIMARY KEY (`merge_commit_hash`, `Repository_id`),
  CONSTRAINT `fk_Merge_Scenario_Repository`
    FOREIGN KEY (`Repository_id`)
    REFERENCES `Merge_Data`.`Repository` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Merge_Data`.`Merge_Replay`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Merge_Data`.`Merge_Replay` ;

CREATE TABLE IF NOT EXISTS `Merge_Data`.`Merge_Replay` (
  `merge_technique` VARCHAR(15) NOT NULL,
  `is_conflict` INT NULL,
  `can_compile` INT NULL,
  `can_pass_test` INT NULL,
  `execution_time` FLOAT NULL,
  `result_is_equal_to_replay` INT NULL,
  `Merge_Scenario_merge_commit_hash` CHAR(40) NOT NULL,
  `Merge_Scenario_Repository_id` BIGINT NOT NULL,
  PRIMARY KEY (`merge_technique`, `Merge_Scenario_merge_commit_hash`, `Merge_Scenario_Repository_id`),
  CONSTRAINT `fk_Merge_Replay_Merge_Scenario1`
    FOREIGN KEY (`Merge_Scenario_merge_commit_hash` , `Merge_Scenario_Repository_id`)
    REFERENCES `Merge_Data`.`Merge_Scenario` (`merge_commit_hash` , `Repository_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Merge_Data`.`Conflicting_File`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Merge_Data`.`Conflicting_File` ;

CREATE TABLE IF NOT EXISTS `Merge_Data`.`Conflicting_File` (
  `file_path_name` VARCHAR(400) NOT NULL,
  `conflict_type` VARCHAR(40) NULL DEFAULT 0,
  `Merge_Replay_merge_technique` VARCHAR(15) NOT NULL,
  `Merge_Replay_Merge_Scenario_merge_commit_hash` CHAR(40) NOT NULL,
  `Merge_Replay_Merge_Scenario_Repository_id` BIGINT NOT NULL,
  PRIMARY KEY (`file_path_name`, `Merge_Replay_merge_technique`, `Merge_Replay_Merge_Scenario_merge_commit_hash`, `Merge_Replay_Merge_Scenario_Repository_id`),
  CONSTRAINT `fk_Conflicting_File_Merge_Replay1`
    FOREIGN KEY (`Merge_Replay_merge_technique` , `Merge_Replay_Merge_Scenario_merge_commit_hash` , `Merge_Replay_Merge_Scenario_Repository_id`)
    REFERENCES `Merge_Data`.`Merge_Replay` (`merge_technique` , `Merge_Scenario_merge_commit_hash` , `Merge_Scenario_Repository_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Merge_Data`.`Merge_Related_Commit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Merge_Data`.`Merge_Related_Commit` ;

CREATE TABLE IF NOT EXISTS `Merge_Data`.`Merge_Related_Commit` (
  `commit_hash` CHAR(40) NOT NULL,
  `date` DATETIME NULL,
  `message` VARCHAR(400) NULL,
  `branch` VARCHAR(45) NULL,
  `merge_commit_parent` INT NULL,
  `file_added_num` INT NULL,
  `file_removed_num` INT NULL,
  `file_renamed_num` INT NULL,
  `file_copied_num` INT NULL,
  `file_modified_num` INT NULL,
  `line_added_num` INT NULL,
  `line_removed_num` INT NULL,
  `Merge_Scenario_merge_commit_hash` CHAR(40) NOT NULL,
  `Merge_Scenario_Repository_id` BIGINT NULL,
  PRIMARY KEY (`commit_hash`, `Merge_Scenario_merge_commit_hash`),
  CONSTRAINT `fk_Merge_Related_commit_Merge_Scenario1`
    FOREIGN KEY (`Merge_Scenario_merge_commit_hash` , `Merge_Scenario_Repository_id`)
    REFERENCES `Merge_Data`.`Merge_Scenario` (`merge_commit_hash` , `Repository_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Merge_Data`.`Code_Complexity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Merge_Data`.`Code_Complexity` ;

CREATE TABLE IF NOT EXISTS `Merge_Data`.`Code_Complexity` (
  `measure1_diff` FLOAT NULL,
  `measure2_diff` FLOAT NULL,
  `measure3_diff` FLOAT NULL,
  `measure4_diff` FLOAT NULL,
  `measure5_diff` FLOAT NULL,
  `measure6_diff` FLOAT NULL,
  `measure7_diff` FLOAT NULL,
  `measure8_diff` FLOAT NULL,
  `Merge_Scenario_merge_commit_hash` CHAR(40) NOT NULL,
  `Merge_Scenario_Repository_id` BIGINT NOT NULL,
  PRIMARY KEY (`Merge_Scenario_merge_commit_hash`, `Merge_Scenario_Repository_id`),
  CONSTRAINT `fk_Code_Complexity_Merge_Scenario1`
    FOREIGN KEY (`Merge_Scenario_merge_commit_hash` , `Merge_Scenario_Repository_id`)
    REFERENCES `Merge_Data`.`Merge_Scenario` (`merge_commit_hash` , `Repository_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Merge_Data`.`Conflicting_Region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Merge_Data`.`Conflicting_Region` ;

CREATE TABLE IF NOT EXISTS `Merge_Data`.`Conflicting_Region` (
  `parent1_path` VARCHAR(400) NOT NULL,
  `parent2_path` VARCHAR(400) NOT NULL,
  `parent1_start_line` INT NULL,
  `parent1_length` INT NULL,
  `parent2_start_line` INT NULL,
  `parent2_length` INT NULL,
  `Merge_Replay_merge_technique` VARCHAR(15) NOT NULL,
  `Merge_Replay_Merge_Scenario_merge_commit_hash` CHAR(40) NOT NULL,
  `Merge_Replay_Merge_Scenario_Repository_id` BIGINT NOT NULL,
  PRIMARY KEY (`parent1_path`, `parent2_path`, `Merge_Replay_merge_technique`, `Merge_Replay_Merge_Scenario_merge_commit_hash`, `Merge_Replay_Merge_Scenario_Repository_id`),
  CONSTRAINT `fk_Conflicting_Region_Merge_Replay1`
    FOREIGN KEY (`Merge_Replay_merge_technique` , `Merge_Replay_Merge_Scenario_merge_commit_hash` , `Merge_Replay_Merge_Scenario_Repository_id`)
    REFERENCES `Merge_Data`.`Merge_Replay` (`merge_technique` , `Merge_Scenario_merge_commit_hash` , `Merge_Scenario_Repository_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Merge_Data`.`Code_Style_Violation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Merge_Data`.`Code_Style_Violation` ;

CREATE TABLE IF NOT EXISTS `Merge_Data`.`Code_Style_Violation` (
  `merge_commit_style_violation_num` INT NOT NULL,
  `ancestor_style_violation_num` INT NULL,
  `parent1_style_violation_num` INT NULL,
  `parent2_style_violation_num` INT NULL,
  `Merge_Scenario_merge_commit_hash` CHAR(40) NOT NULL,
  `Merge_Scenario_Repository_id` BIGINT NOT NULL,
  PRIMARY KEY (`merge_commit_style_violation_num`, `Merge_Scenario_merge_commit_hash`, `Merge_Scenario_Repository_id`),
  CONSTRAINT `fk_Code_Style_Violation_Merge_Scenario1`
    FOREIGN KEY (`Merge_Scenario_merge_commit_hash` , `Merge_Scenario_Repository_id`)
    REFERENCES `Merge_Data`.`Merge_Scenario` (`merge_commit_hash` , `Repository_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
